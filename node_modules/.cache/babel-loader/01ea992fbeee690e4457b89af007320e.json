{"ast":null,"code":"var _jsxFileName = \"/home/daniofilho/Trabalho/Github/tiles-playground/src/pages/Isometric/index.tsx\";\nimport React, { useState, useMemo } from \"react\";\nimport IsometricTile from \"components/IsometricTile\";\nimport { Container, MiniMap } from \"./styles\";\n\nconst Isometric = () => {\n  const [tiles, setTiles] = useState({\n    onX: 10,\n    onY: 5,\n    size: 128,\n    height: 16\n  });\n  const quantity = useMemo(() => {\n    return tiles.onX * tiles.onY;\n  }, [tiles.onX, tiles.onY]);\n  const renderedTiles = useMemo(() => {\n    const aux = [];\n    new Array(tiles.onX).fill(\"\").map((_, x) => {\n      new Array(tiles.onY).fill(\"\").map((_, y) => {\n        aux.push({\n          key: `${x}x${y}`,\n          x,\n          y,\n          size: tiles.size,\n          height: tiles.height\n        });\n      });\n    });\n    return aux;\n  }, [tiles.height, tiles.onX, tiles.onY, tiles.size]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MiniMap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, renderedTiles && renderedTiles.map(tile => {\n    return /*#__PURE__*/React.createElement(IsometricTile, Object.assign({}, tile, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 20\n      }\n    }));\n  })));\n};\n\nexport default Isometric;","map":{"version":3,"sources":["/home/daniofilho/Trabalho/Github/tiles-playground/src/pages/Isometric/index.tsx"],"names":["React","useState","useMemo","IsometricTile","Container","MiniMap","Isometric","tiles","setTiles","onX","onY","size","height","quantity","renderedTiles","aux","Array","fill","map","_","x","y","push","key","tile"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAuD,OAAvD;AAEA,OAAOC,aAAP,MAA0B,0BAA1B;AAIA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,UAAnC;;AAEA,MAAMC,SAAmB,GAAG,MAAM;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAY;AAC5CQ,IAAAA,GAAG,EAAE,EADuC;AAE5CC,IAAAA,GAAG,EAAE,CAFuC;AAG5CC,IAAAA,IAAI,EAAE,GAHsC;AAI5CC,IAAAA,MAAM,EAAE;AAJoC,GAAZ,CAAlC;AAOA,QAAMC,QAAQ,GAAGX,OAAO,CAAC,MAAc;AACrC,WAAOK,KAAK,CAACE,GAAN,GAAYF,KAAK,CAACG,GAAzB;AACD,GAFuB,EAErB,CAACH,KAAK,CAACE,GAAP,EAAYF,KAAK,CAACG,GAAlB,CAFqB,CAAxB;AAIA,QAAMI,aAAa,GAAGZ,OAAO,CAAC,MAAoC;AAChE,UAAMa,GAAiC,GAAG,EAA1C;AAEA,QAAIC,KAAJ,CAAUT,KAAK,CAACE,GAAhB,EAAqBQ,IAArB,CAA0B,EAA1B,EAA8BC,GAA9B,CAAkC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1C,UAAIJ,KAAJ,CAAUT,KAAK,CAACG,GAAhB,EAAqBO,IAArB,CAA0B,EAA1B,EAA8BC,GAA9B,CAAkC,CAACC,CAAD,EAAIE,CAAJ,KAAU;AAC1CN,QAAAA,GAAG,CAACO,IAAJ,CAAS;AACPC,UAAAA,GAAG,EAAG,GAAEH,CAAE,IAAGC,CAAE,EADR;AAEPD,UAAAA,CAFO;AAGPC,UAAAA,CAHO;AAIPV,UAAAA,IAAI,EAAEJ,KAAK,CAACI,IAJL;AAKPC,UAAAA,MAAM,EAAEL,KAAK,CAACK;AALP,SAAT;AAOD,OARD;AASD,KAVD;AAYA,WAAOG,GAAP;AACD,GAhB4B,EAgB1B,CAACR,KAAK,CAACK,MAAP,EAAeL,KAAK,CAACE,GAArB,EAA0BF,KAAK,CAACG,GAAhC,EAAqCH,KAAK,CAACI,IAA3C,CAhB0B,CAA7B;AAkBA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,aAAa,IACZA,aAAa,CAACI,GAAd,CAAmBM,IAAD,IAAiC;AACjD,wBAAO,oBAAC,aAAD,oBAAmBA,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAFD,CAFJ,CADF,CADF;AAUD,CAxCD;;AA0CA,eAAelB,SAAf","sourcesContent":["import React, { useState, useMemo, ReactElement } from \"react\";\n\nimport IsometricTile from \"components/IsometricTile\";\n\nimport { tilesType, IRenderedTiles } from \"./types\";\n\nimport { Container, MiniMap } from \"./styles\";\n\nconst Isometric: React.FC = () => {\n  const [tiles, setTiles] = useState<tilesType>({\n    onX: 10,\n    onY: 5,\n    size: 128,\n    height: 16,\n  });\n\n  const quantity = useMemo((): number => {\n    return tiles.onX * tiles.onY;\n  }, [tiles.onX, tiles.onY]);\n\n  const renderedTiles = useMemo((): Array<IRenderedTiles | null> => {\n    const aux: Array<IRenderedTiles | null> = [];\n\n    new Array(tiles.onX).fill(\"\").map((_, x) => {\n      new Array(tiles.onY).fill(\"\").map((_, y) => {\n        aux.push({\n          key: `${x}x${y}`,\n          x,\n          y,\n          size: tiles.size,\n          height: tiles.height,\n        });\n      });\n    });\n\n    return aux;\n  }, [tiles.height, tiles.onX, tiles.onY, tiles.size]);\n\n  return (\n    <Container>\n      <MiniMap>\n        {renderedTiles &&\n          renderedTiles.map((tile: IRenderedTiles | null) => {\n            return <IsometricTile {...tile} />;\n          })}\n      </MiniMap>\n    </Container>\n  );\n};\n\nexport default Isometric;\n"]},"metadata":{},"sourceType":"module"}