{"ast":null,"code":"var _jsxFileName = \"/home/daniofilho/Trabalho/Github/tiles-playground/src/pages/Isometric/index.tsx\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState, useMemo } from \"react\";\nimport IsometricTile from \"components/IsometricTile\";\nimport { Container, MiniMap } from \"./styles\";\n\nconst Isometric = () => {\n  const [tiles, setTiles] = useState({\n    onX: 10,\n    onY: 20,\n    size: {\n      width: 32 * 5,\n      height: 30 * 5\n    },\n    tall: 16\n  });\n  /*const quantity = useMemo((): number => {\n    return tiles.onX * tiles.onY;\n  }, [tiles.onX, tiles.onY]);\n   const distance = useMemo((): number => {\n    return tiles.size * Math.sqrt(2);\n  }, [tiles]);*/\n\n  const renderedTiles = useMemo(() => {\n    const aux = [];\n    let tileY = 0;\n    new Array(tiles.onY).fill(\"\").map((_, y) => {\n      new Array(tiles.onX).fill(\"\").map((_, x) => {\n        return aux.push({\n          key: `${x}x${y}`,\n          x: y % 2 ? x * tiles.size.width - tiles.size.width / 2 : x * tiles.size.width,\n          y: tileY,\n          size: tiles.size,\n          tall: tiles.tall\n        });\n      });\n      tileY += tiles.size.height / 2 - tiles.tall;\n      return true;\n    });\n    return aux;\n  }, [tiles.onX, tiles.onY, tiles.size, tiles.tall]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MiniMap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, renderedTiles && renderedTiles.map(tile => {\n    if (tile) return /*#__PURE__*/React.createElement(IsometricTile, Object.assign({}, tile, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 30\n      }\n    }));\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  })));\n};\n\nexport default Isometric;","map":{"version":3,"sources":["/home/daniofilho/Trabalho/Github/tiles-playground/src/pages/Isometric/index.tsx"],"names":["React","useState","useMemo","IsometricTile","Container","MiniMap","Isometric","tiles","setTiles","onX","onY","size","width","height","tall","renderedTiles","aux","tileY","Array","fill","map","_","y","x","push","key","tile"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAuD,OAAvD;AAEA,OAAOC,aAAP,MAA0B,0BAA1B;AAIA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,UAAnC;;AAEA,MAAMC,SAAmB,GAAG,MAAM;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAY;AAC5CQ,IAAAA,GAAG,EAAE,EADuC;AAE5CC,IAAAA,GAAG,EAAE,EAFuC;AAG5CC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE,KAAK,CADR;AAEJC,MAAAA,MAAM,EAAE,KAAK;AAFT,KAHsC;AAO5CC,IAAAA,IAAI,EAAE;AAPsC,GAAZ,CAAlC;AAUA;;;;;;;AAQA,QAAMC,aAAa,GAAGb,OAAO,CAAC,MAAoC;AAChE,UAAMc,GAAiC,GAAG,EAA1C;AAEA,QAAIC,KAAK,GAAG,CAAZ;AAEA,QAAIC,KAAJ,CAAUX,KAAK,CAACG,GAAhB,EAAqBS,IAArB,CAA0B,EAA1B,EAA8BC,GAA9B,CAAkC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1C,UAAIJ,KAAJ,CAAUX,KAAK,CAACE,GAAhB,EAAqBU,IAArB,CAA0B,EAA1B,EAA8BC,GAA9B,CAAkC,CAACC,CAAD,EAAIE,CAAJ,KAAU;AAC1C,eAAOP,GAAG,CAACQ,IAAJ,CAAS;AACdC,UAAAA,GAAG,EAAG,GAAEF,CAAE,IAAGD,CAAE,EADD;AAEdC,UAAAA,CAAC,EACCD,CAAC,GAAG,CAAJ,GACIC,CAAC,GAAGhB,KAAK,CAACI,IAAN,CAAWC,KAAf,GAAuBL,KAAK,CAACI,IAAN,CAAWC,KAAX,GAAmB,CAD9C,GAEIW,CAAC,GAAGhB,KAAK,CAACI,IAAN,CAAWC,KALP;AAMdU,UAAAA,CAAC,EAAEL,KANW;AAOdN,UAAAA,IAAI,EAAEJ,KAAK,CAACI,IAPE;AAQdG,UAAAA,IAAI,EAAEP,KAAK,CAACO;AARE,SAAT,CAAP;AAUD,OAXD;AAYAG,MAAAA,KAAK,IAAIV,KAAK,CAACI,IAAN,CAAWE,MAAX,GAAoB,CAApB,GAAwBN,KAAK,CAACO,IAAvC;AACA,aAAO,IAAP;AACD,KAfD;AAiBA,WAAOE,GAAP;AACD,GAvB4B,EAuB1B,CAACT,KAAK,CAACE,GAAP,EAAYF,KAAK,CAACG,GAAlB,EAAuBH,KAAK,CAACI,IAA7B,EAAmCJ,KAAK,CAACO,IAAzC,CAvB0B,CAA7B;AAyBA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,aAAa,IACZA,aAAa,CAACK,GAAd,CAAmBM,IAAD,IAAiC;AACjD,QAAIA,IAAJ,EAAU,oBAAO,oBAAC,aAAD,oBAAmBA,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACV,wBAAO,yCAAP;AACD,GAHD,CAFJ,CADF,CADF;AAWD,CAvDD;;AAyDA,eAAepB,SAAf","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState, useMemo, ReactElement } from \"react\";\n\nimport IsometricTile from \"components/IsometricTile\";\n\nimport { tilesType, IRenderedTiles } from \"./types\";\n\nimport { Container, MiniMap } from \"./styles\";\n\nconst Isometric: React.FC = () => {\n  const [tiles, setTiles] = useState<tilesType>({\n    onX: 10,\n    onY: 20,\n    size: {\n      width: 32 * 5,\n      height: 30 * 5,\n    },\n    tall: 16,\n  });\n\n  /*const quantity = useMemo((): number => {\n    return tiles.onX * tiles.onY;\n  }, [tiles.onX, tiles.onY]);\n\n  const distance = useMemo((): number => {\n    return tiles.size * Math.sqrt(2);\n  }, [tiles]);*/\n\n  const renderedTiles = useMemo((): Array<IRenderedTiles | null> => {\n    const aux: Array<IRenderedTiles | null> = [];\n\n    let tileY = 0;\n\n    new Array(tiles.onY).fill(\"\").map((_, y) => {\n      new Array(tiles.onX).fill(\"\").map((_, x) => {\n        return aux.push({\n          key: `${x}x${y}`,\n          x:\n            y % 2\n              ? x * tiles.size.width - tiles.size.width / 2\n              : x * tiles.size.width,\n          y: tileY,\n          size: tiles.size,\n          tall: tiles.tall,\n        });\n      });\n      tileY += tiles.size.height / 2 - tiles.tall;\n      return true;\n    });\n\n    return aux;\n  }, [tiles.onX, tiles.onY, tiles.size, tiles.tall]);\n\n  return (\n    <Container>\n      <MiniMap>\n        {renderedTiles &&\n          renderedTiles.map((tile: IRenderedTiles | null) => {\n            if (tile) return <IsometricTile {...tile} />;\n            return <></>;\n          })}\n      </MiniMap>\n    </Container>\n  );\n};\n\nexport default Isometric;\n"]},"metadata":{},"sourceType":"module"}