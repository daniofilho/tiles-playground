{"ast":null,"code":"var _jsxFileName = \"/home/daniofilho/Trabalho/Github/tiles-playground/src/pages/Isometric/index.tsx\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState, useMemo } from \"react\";\nimport IsometricTile from \"components/IsometricTile\";\nimport { Container, MiniMap } from \"./styles\";\n\nconst Isometric = () => {\n  const [tiles, setTiles] = useState({\n    onX: 3,\n    onY: 3,\n    size: {\n      width: 32 * 3,\n      height: 30 * 4\n    },\n    height: 16\n  });\n  const quantity = useMemo(() => {\n    return tiles.onX * tiles.onY;\n  }, [tiles.onX, tiles.onY]);\n  const distance = useMemo(() => {\n    return tiles.size * Math.sqrt(2);\n  }, [tiles]);\n  const renderedTiles = useMemo(() => {\n    const aux = [];\n    let tileY = 0;\n    new Array(tiles.onY).fill(\"\").map((_, y) => {\n      new Array(tiles.onX).fill(\"\").map((_, x) => {\n        return aux.push({\n          key: `${x}x${y}`,\n          x: y % 2 ? x * tiles.size - tiles.size / 2 : x * tiles.size,\n          y: y * tileY,\n          size: tiles.size,\n          height: tiles.height\n        });\n      });\n      tileY += tiles.size / 2;\n      return true;\n    });\n    return aux;\n  }, [tiles.height, tiles.onX, tiles.onY, tiles.size]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MiniMap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, renderedTiles && renderedTiles.map(tile => {\n    if (tile) return /*#__PURE__*/React.createElement(IsometricTile, Object.assign({}, tile, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 30\n      }\n    }));\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  })));\n};\n\nexport default Isometric;","map":{"version":3,"sources":["/home/daniofilho/Trabalho/Github/tiles-playground/src/pages/Isometric/index.tsx"],"names":["React","useState","useMemo","IsometricTile","Container","MiniMap","Isometric","tiles","setTiles","onX","onY","size","width","height","quantity","distance","Math","sqrt","renderedTiles","aux","tileY","Array","fill","map","_","y","x","push","key","tile"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAuD,OAAvD;AAEA,OAAOC,aAAP,MAA0B,0BAA1B;AAIA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,UAAnC;;AAEA,MAAMC,SAAmB,GAAG,MAAM;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAY;AAC5CQ,IAAAA,GAAG,EAAE,CADuC;AAE5CC,IAAAA,GAAG,EAAE,CAFuC;AAG5CC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE,KAAK,CADR;AAEJC,MAAAA,MAAM,EAAE,KAAK;AAFT,KAHsC;AAO5CA,IAAAA,MAAM,EAAE;AAPoC,GAAZ,CAAlC;AAUA,QAAMC,QAAQ,GAAGZ,OAAO,CAAC,MAAc;AACrC,WAAOK,KAAK,CAACE,GAAN,GAAYF,KAAK,CAACG,GAAzB;AACD,GAFuB,EAErB,CAACH,KAAK,CAACE,GAAP,EAAYF,KAAK,CAACG,GAAlB,CAFqB,CAAxB;AAIA,QAAMK,QAAQ,GAAGb,OAAO,CAAC,MAAc;AACrC,WAAOK,KAAK,CAACI,IAAN,GAAaK,IAAI,CAACC,IAAL,CAAU,CAAV,CAApB;AACD,GAFuB,EAErB,CAACV,KAAD,CAFqB,CAAxB;AAIA,QAAMW,aAAa,GAAGhB,OAAO,CAAC,MAAoC;AAChE,UAAMiB,GAAiC,GAAG,EAA1C;AAEA,QAAIC,KAAK,GAAG,CAAZ;AAEA,QAAIC,KAAJ,CAAUd,KAAK,CAACG,GAAhB,EAAqBY,IAArB,CAA0B,EAA1B,EAA8BC,GAA9B,CAAkC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1C,UAAIJ,KAAJ,CAAUd,KAAK,CAACE,GAAhB,EAAqBa,IAArB,CAA0B,EAA1B,EAA8BC,GAA9B,CAAkC,CAACC,CAAD,EAAIE,CAAJ,KAAU;AAC1C,eAAOP,GAAG,CAACQ,IAAJ,CAAS;AACdC,UAAAA,GAAG,EAAG,GAAEF,CAAE,IAAGD,CAAE,EADD;AAEdC,UAAAA,CAAC,EAAED,CAAC,GAAG,CAAJ,GAAQC,CAAC,GAAGnB,KAAK,CAACI,IAAV,GAAiBJ,KAAK,CAACI,IAAN,GAAa,CAAtC,GAA0Ce,CAAC,GAAGnB,KAAK,CAACI,IAFzC;AAGdc,UAAAA,CAAC,EAAEA,CAAC,GAAGL,KAHO;AAIdT,UAAAA,IAAI,EAAEJ,KAAK,CAACI,IAJE;AAKdE,UAAAA,MAAM,EAAEN,KAAK,CAACM;AALA,SAAT,CAAP;AAOD,OARD;AASAO,MAAAA,KAAK,IAAIb,KAAK,CAACI,IAAN,GAAa,CAAtB;AACA,aAAO,IAAP;AACD,KAZD;AAcA,WAAOQ,GAAP;AACD,GApB4B,EAoB1B,CAACZ,KAAK,CAACM,MAAP,EAAeN,KAAK,CAACE,GAArB,EAA0BF,KAAK,CAACG,GAAhC,EAAqCH,KAAK,CAACI,IAA3C,CApB0B,CAA7B;AAsBA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,aAAa,IACZA,aAAa,CAACK,GAAd,CAAmBM,IAAD,IAAiC;AACjD,QAAIA,IAAJ,EAAU,oBAAO,oBAAC,aAAD,oBAAmBA,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACV,wBAAO,yCAAP;AACD,GAHD,CAFJ,CADF,CADF;AAWD,CApDD;;AAsDA,eAAevB,SAAf","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState, useMemo, ReactElement } from \"react\";\n\nimport IsometricTile from \"components/IsometricTile\";\n\nimport { tilesType, IRenderedTiles } from \"./types\";\n\nimport { Container, MiniMap } from \"./styles\";\n\nconst Isometric: React.FC = () => {\n  const [tiles, setTiles] = useState<tilesType>({\n    onX: 3,\n    onY: 3,\n    size: {\n      width: 32 * 3,\n      height: 30 * 4,\n    },\n    height: 16,\n  });\n\n  const quantity = useMemo((): number => {\n    return tiles.onX * tiles.onY;\n  }, [tiles.onX, tiles.onY]);\n\n  const distance = useMemo((): number => {\n    return tiles.size * Math.sqrt(2);\n  }, [tiles]);\n\n  const renderedTiles = useMemo((): Array<IRenderedTiles | null> => {\n    const aux: Array<IRenderedTiles | null> = [];\n\n    let tileY = 0;\n\n    new Array(tiles.onY).fill(\"\").map((_, y) => {\n      new Array(tiles.onX).fill(\"\").map((_, x) => {\n        return aux.push({\n          key: `${x}x${y}`,\n          x: y % 2 ? x * tiles.size - tiles.size / 2 : x * tiles.size,\n          y: y * tileY,\n          size: tiles.size,\n          height: tiles.height,\n        });\n      });\n      tileY += tiles.size / 2;\n      return true;\n    });\n\n    return aux;\n  }, [tiles.height, tiles.onX, tiles.onY, tiles.size]);\n\n  return (\n    <Container>\n      <MiniMap>\n        {renderedTiles &&\n          renderedTiles.map((tile: IRenderedTiles | null) => {\n            if (tile) return <IsometricTile {...tile} />;\n            return <></>;\n          })}\n      </MiniMap>\n    </Container>\n  );\n};\n\nexport default Isometric;\n"]},"metadata":{},"sourceType":"module"}