{"ast":null,"code":"var _jsxFileName = \"/home/daniofilho/Trabalho/Github/tiles-playground/src/pages/Isometric/index.tsx\";\nimport React, { useState, useMemo } from \"react\";\nimport IsometricTile from \"components/IsometricTile\";\nimport { Container, MiniMap } from \"./styles\";\n\nconst Isometric = () => {\n  const [tiles, setTiles] = useState({\n    onX: 10,\n    onY: 5,\n    size: 128,\n    height: 16\n  });\n  const quantity = useMemo(() => {\n    return tiles.onX * tiles.onY;\n  }, [tiles.onX, tiles.onY]);\n  const renderedTiles = useMemo(() => {\n    const aux = {};\n    new Array(tiles.onX).fill(\"\").map((_, x) => {\n      new Array(tiles.onY).fill(\"\").map((_, y) => {\n        aux.push({\n          key: `${x}x${y}`,\n          x,\n          y,\n          size,\n          height\n        });\n      });\n    });\n    return aux;\n  }, [tiles.onX, tiles.onY]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MiniMap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, new Array(tiles.onX).fill(\"\").map((_, x) => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, new Array(tiles.onY).fill(\"\").map((_, y) => {\n      return /*#__PURE__*/React.createElement(IsometricTile, {\n        key: `${x}x${y}}`,\n        x: x,\n        y: y,\n        size: tiles.size,\n        height: tiles.height,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 19\n        }\n      });\n    }));\n  })));\n};\n\nexport default Isometric;","map":{"version":3,"sources":["/home/daniofilho/Trabalho/Github/tiles-playground/src/pages/Isometric/index.tsx"],"names":["React","useState","useMemo","IsometricTile","Container","MiniMap","Isometric","tiles","setTiles","onX","onY","size","height","quantity","renderedTiles","aux","Array","fill","map","_","x","y","push","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;AAEA,OAAOC,aAAP,MAA0B,0BAA1B;AAIA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,UAAnC;;AAEA,MAAMC,SAAmB,GAAG,MAAM;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAY;AAC5CQ,IAAAA,GAAG,EAAE,EADuC;AAE5CC,IAAAA,GAAG,EAAE,CAFuC;AAG5CC,IAAAA,IAAI,EAAE,GAHsC;AAI5CC,IAAAA,MAAM,EAAE;AAJoC,GAAZ,CAAlC;AAOA,QAAMC,QAAQ,GAAGX,OAAO,CAAC,MAAc;AACrC,WAAOK,KAAK,CAACE,GAAN,GAAYF,KAAK,CAACG,GAAzB;AACD,GAFuB,EAErB,CAACH,KAAK,CAACE,GAAP,EAAYF,KAAK,CAACG,GAAlB,CAFqB,CAAxB;AAIA,QAAMI,aAAa,GAAGZ,OAAO,CAE3B,MAAoC;AACpC,UAAMa,GAAiC,GAAG,EAA1C;AAEA,QAAIC,KAAJ,CAAUT,KAAK,CAACE,GAAhB,EAAqBQ,IAArB,CAA0B,EAA1B,EAA8BC,GAA9B,CAAkC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1C,UAAIJ,KAAJ,CAAUT,KAAK,CAACG,GAAhB,EAAqBO,IAArB,CAA0B,EAA1B,EAA8BC,GAA9B,CAAkC,CAACC,CAAD,EAAIE,CAAJ,KAAU;AAC1CN,QAAAA,GAAG,CAACO,IAAJ,CAAS;AACPC,UAAAA,GAAG,EAAG,GAAEH,CAAE,IAAGC,CAAE,EADR;AAEPD,UAAAA,CAFO;AAGPC,UAAAA,CAHO;AAIPV,UAAAA,IAJO;AAKPC,UAAAA;AALO,SAAT;AAOD,OARD;AASD,KAVD;AAYA,WAAOG,GAAP;AACD,GAlB4B,EAkB1B,CAACR,KAAK,CAACE,GAAP,EAAYF,KAAK,CAACG,GAAlB,CAlB0B,CAA7B;AAoBA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,IAAIM,KAAJ,CAAUT,KAAK,CAACE,GAAhB,EAAqBQ,IAArB,CAA0B,EAA1B,EAA8BC,GAA9B,CAAkC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC3C,wBACE,0CACG,IAAIJ,KAAJ,CAAUT,KAAK,CAACG,GAAhB,EAAqBO,IAArB,CAA0B,EAA1B,EAA8BC,GAA9B,CAAkC,CAACC,CAAD,EAAIE,CAAJ,KAAU;AAC3C,0BACE,oBAAC,aAAD;AACE,QAAA,GAAG,EAAG,GAAED,CAAE,IAAGC,CAAE,GADjB;AAEE,QAAA,CAAC,EAAED,CAFL;AAGE,QAAA,CAAC,EAAEC,CAHL;AAIE,QAAA,IAAI,EAAEd,KAAK,CAACI,IAJd;AAKE,QAAA,MAAM,EAAEJ,KAAK,CAACK,MALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD,KAVA,CADH,CADF;AAeD,GAhBA,CADH,CADF,CADF;AAuBD,CAvDD;;AAyDA,eAAeN,SAAf","sourcesContent":["import React, { useState, useMemo } from \"react\";\n\nimport IsometricTile from \"components/IsometricTile\";\n\nimport { tilesType, IRenderedTiles } from \"./types\";\n\nimport { Container, MiniMap } from \"./styles\";\n\nconst Isometric: React.FC = () => {\n  const [tiles, setTiles] = useState<tilesType>({\n    onX: 10,\n    onY: 5,\n    size: 128,\n    height: 16,\n  });\n\n  const quantity = useMemo((): number => {\n    return tiles.onX * tiles.onY;\n  }, [tiles.onX, tiles.onY]);\n\n  const renderedTiles = useMemo<\n    Array<IRenderedTiles | null>\n  >((): Array<IRenderedTiles | null> => {\n    const aux: Array<IRenderedTiles | null> = {};\n\n    new Array(tiles.onX).fill(\"\").map((_, x) => {\n      new Array(tiles.onY).fill(\"\").map((_, y) => {\n        aux.push({\n          key: `${x}x${y}`,\n          x,\n          y,\n          size,\n          height,\n        });\n      });\n    });\n\n    return aux;\n  }, [tiles.onX, tiles.onY]);\n\n  return (\n    <Container>\n      <MiniMap>\n        {new Array(tiles.onX).fill(\"\").map((_, x) => {\n          return (\n            <>\n              {new Array(tiles.onY).fill(\"\").map((_, y) => {\n                return (\n                  <IsometricTile\n                    key={`${x}x${y}}`}\n                    x={x}\n                    y={y}\n                    size={tiles.size}\n                    height={tiles.height}\n                  />\n                );\n              })}\n            </>\n          );\n        })}\n      </MiniMap>\n    </Container>\n  );\n};\n\nexport default Isometric;\n"]},"metadata":{},"sourceType":"module"}