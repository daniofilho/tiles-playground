{"ast":null,"code":"var _jsxFileName = \"/home/daniofilho/Trabalho/Github/tiles-playground/src/components/IsometricTile/index.tsx\";\nimport React, { useMemo } from \"react\";\nimport { Container } from \"./styles\";\n\nconst IsometricTile = ({\n  x,\n  y,\n  size,\n  height\n}) => {\n  const posX = useMemo(() => {\n    let newX = x * size;\n\n    if (y % 2) {\n      newX -= size / 2;\n    }\n\n    return newX;\n  }, [size, x, y]);\n  const posY = useMemo(() => {\n    let newY = y * size;\n\n    if (y % 2) {\n      newY -= size / 2 + height;\n    }\n\n    return newY;\n  }, [height, size, y]);\n  return /*#__PURE__*/React.createElement(Container, {\n    x: posX,\n    y: posY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default IsometricTile;","map":{"version":3,"sources":["/home/daniofilho/Trabalho/Github/tiles-playground/src/components/IsometricTile/index.tsx"],"names":["React","useMemo","Container","IsometricTile","x","y","size","height","posX","newX","posY","newY"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAEA,SAASC,SAAT,QAA0B,UAA1B;;AAEA,MAAMC,aAA0C,GAAG,CAAC;AAAEC,EAAAA,CAAF;AAAKC,EAAAA,CAAL;AAAQC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,CAAD,KAA4B;AAC7E,QAAMC,IAAI,GAAGP,OAAO,CAAC,MAAM;AACzB,QAAIQ,IAAI,GAAGL,CAAC,GAAGE,IAAf;;AAEA,QAAID,CAAC,GAAG,CAAR,EAAW;AACTI,MAAAA,IAAI,IAAIH,IAAI,GAAG,CAAf;AACD;;AAED,WAAOG,IAAP;AACD,GARmB,EAQjB,CAACH,IAAD,EAAOF,CAAP,EAAUC,CAAV,CARiB,CAApB;AAUA,QAAMK,IAAI,GAAGT,OAAO,CAAC,MAAM;AACzB,QAAIU,IAAI,GAAGN,CAAC,GAAGC,IAAf;;AAEA,QAAID,CAAC,GAAG,CAAR,EAAW;AACTM,MAAAA,IAAI,IAAIL,IAAI,GAAG,CAAP,GAAWC,MAAnB;AACD;;AAED,WAAOI,IAAP;AACD,GARmB,EAQjB,CAACJ,MAAD,EAASD,IAAT,EAAeD,CAAf,CARiB,CAApB;AAUA,sBAAO,oBAAC,SAAD;AAAW,IAAA,CAAC,EAAEG,IAAd;AAAoB,IAAA,CAAC,EAAEE,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAtBD;;AAwBA,eAAeP,aAAf","sourcesContent":["import React, { useMemo } from \"react\";\n\nimport { Container } from \"./styles\";\n\nconst IsometricTile: React.FC<IsometricTileType> = ({ x, y, size, height }) => {\n  const posX = useMemo(() => {\n    let newX = x * size;\n\n    if (y % 2) {\n      newX -= size / 2;\n    }\n\n    return newX;\n  }, [size, x, y]);\n\n  const posY = useMemo(() => {\n    let newY = y * size;\n\n    if (y % 2) {\n      newY -= size / 2 + height;\n    }\n\n    return newY;\n  }, [height, size, y]);\n\n  return <Container x={posX} y={posY} />;\n};\n\nexport default IsometricTile;\n"]},"metadata":{},"sourceType":"module"}